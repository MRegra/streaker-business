name: CI

on:
  push:
    branches:
      - 'feature/**'
  pull_request:
    branches:
      - 'feature/**'

jobs:
  # CI + Test
  ci:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      SPRING_DATASOURCE_URL: ${{ vars.SPRING_DATASOURCE_URL_TESTS }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build, Lint & Test Backend
        working-directory: ./backend
        run: mvn clean verify

      - name: Generate JaCoCo Report
        working-directory: ./backend
        run: mvn jacoco:report

      - name: Upload Codecov Report
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./backend/target/site/jacoco
          flags: backend
          name: codecov-backend-report
          fail_ci_if_error: true

  security-scan:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ---- BACKEND ----
      - name: Build backend image (without pushing)
        run: docker build -t streaker-backend:scan ./backend

      - name: Scan backend Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: streaker-backend:scan
          format: table
          exit-code: 1
          severity: CRITICAL,HIGH

      # ---- FRONTEND IMAGE ----
      - name: Build frontend image (without pushing)
        run: docker build -t streaker-frontend:scan ./frontend

      - name: Scan frontend Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: streaker-frontend:scan
          format: table
          exit-code: 1
          severity: CRITICAL,HIGH

      # ---- CADDY IMAGE ----
      - name: Build caddy image (without pushing)
        run: docker build -t streaker-caddy:scan ./infra/caddy

      - name: Scan caddy Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: streaker-caddy:scan
          format: table
          exit-code: 1
          severity: CRITICAL,HIGH

      # ---- FILESYSTEM SCANS ----
      - name: Scan backend filesystem with Trivy (SCA)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: ./backend
          severity: CRITICAL,HIGH
          exit-code: 1

      - name: Scan frontend filesystem with Trivy (SCA)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: ./frontend
          severity: CRITICAL,HIGH
          exit-code: 1

      # ---- IAC SCAN ----
      - name: Scan Dockerfiles and Compose (IaC)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config
          scan-ref: .
          exit-code: 1

      # ---- SEMGREP ----
      - name: Semgrep SAST scan (Java + Angular)
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto

      # ---- GITLEAKS ----
      - name: Run Gitleaks (Secret detection)
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml  # Optional
