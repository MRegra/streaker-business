name: Full Pipeline (CI → Version Bump → GHCR → Deploy Staging)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write  # Required to push to the repo

jobs:
  # CI + Test
  ci:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      SPRING_DATASOURCE_URL: ${{ vars.SPRING_DATASOURCE_URL_TESTS }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build, Lint & Test Backend
        working-directory: ./backend
        run: mvn clean verify

      - name: Generate JaCoCo Report
        working-directory: ./backend
        run: mvn jacoco:report

      - name: Upload Codecov Report
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./backend/target/site/jacoco
          flags: backend
          name: codecov-backend-report
          fail_ci_if_error: true

  security-scan:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ---- BACKEND ----
      - name: Build backend image (without pushing)
        run: docker build -t streaker-backend:scan ./backend

      - name: Scan backend Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: streaker-backend:scan
          format: table
          exit-code: 1
          severity: CRITICAL,HIGH

      # ---- FRONTEND IMAGE ----
      - name: Build frontend image (without pushing)
        run: docker build -t streaker-frontend:scan ./frontend

      - name: Scan frontend Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: streaker-frontend:scan
          format: table
          exit-code: 1
          severity: CRITICAL,HIGH

      # ---- CADDY IMAGE ----
      - name: Build caddy image (without pushing)
        run: docker build -t streaker-caddy:scan -f ./infra/caddy/Dockerfile .

      - name: Scan caddy Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: streaker-caddy:scan
          format: table
          exit-code: 1
          severity: CRITICAL,HIGH

      # ---- FILESYSTEM SCANS ----
      - name: Scan backend filesystem with Trivy (SCA)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: ./backend
          severity: CRITICAL,HIGH
          exit-code: 1

      - name: Scan frontend filesystem with Trivy (SCA)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: ./frontend
          severity: CRITICAL,HIGH
          exit-code: 1

      # ---- IAC SCAN ----
      - name: Scan Dockerfiles and Compose (IaC)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config
          scan-ref: .
          exit-code: 1

      # ---- SEMGREP ----
      - name: Semgrep SAST scan (Java + Angular)
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto

      # ---- GITLEAKS ----
      - name: Run Gitleaks (Secret detection)
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml  # Optional

  # Semantic Version Bump
  version-bump:
    needs: security-scan
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install semantic-release
        run: |
          npm install --no-save semantic-release \
            @semantic-release/git \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            @semantic-release/changelog \
            @semantic-release/exec

      - name: Make bump script executable
        run: chmod +x infra/scripts/.bump-version.sh

      - name: Fetch last 2 commits
        run: git fetch origin main --depth=2

      - name: Detect changed paths
        id: detect
        run: |
          CHANGED_FILES=$(git diff --name-only origin/main~1..origin/main)
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          echo "frontend=false" >> $GITHUB_OUTPUT
          echo "backend=false" >> $GITHUB_OUTPUT

          for file in $CHANGED_FILES; do
            if [[ "$file" == frontend/* ]]; then
              echo "frontend=true" >> $GITHUB_OUTPUT
            elif [[ "$file" == backend/* ]]; then
              echo "backend=true" >> $GITHUB_OUTPUT
            fi
          done

      - name: Bump backend version
        if: steps.detect.outputs.backend == 'true'
        run: |
          echo "Running semantic-release for backend"
          mv .releaserc.backend.json .releaserc.json
          npx semantic-release --debug
          mv .releaserc.json .releaserc.backend.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump frontend version
        if: steps.detect.outputs.frontend == 'true'
        run: |
          echo "Running semantic-release for frontend"
          mv .releaserc.frontend.json .releaserc.json
          npx semantic-release --debug
          mv .releaserc.json .releaserc.frontend.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump global version
        run: |
          echo "Running semantic-release for global"
          mv .releaserc.global.json .releaserc.json
          npx semantic-release --debug
          mv .releaserc.json .releaserc.global.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Show bumped version
        run: |
          ls -la
          cat VERSION_BACKEND || echo "VERSION_BACKEND missing"
          grep '<version>' backend/pom.xml || echo "Version tag missing from pom.xml"

  # Sync main → staging
  sync-main-to-staging:
    needs: version-bump
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Force push main → staging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git push origin main:staging --force

  # Build & Push All Images to GHCR
  push-to-ghcr:
    needs: sync-main-to-staging
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - id: get_versions
        run: |
          echo "VERSION_TAG_BACKEND=$(cat VERSION_BACKEND)" >> $GITHUB_ENV
          echo "VERSION_TAG_FRONTEND=$(cat VERSION_FRONTEND)" >> $GITHUB_ENV

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
      - name: Generate SHA Tag
        run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/mregra/streaker-backend:latest
            ghcr.io/mregra/streaker-backend:${{ env.VERSION_TAG_BACKEND }}
            ghcr.io/mregra/streaker-backend:${{ env.GIT_SHA }}

      - name: Push caddy image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/caddy/Dockerfile
          push: true
          tags: ghcr.io/mregra/streaker-caddy-prod:latest

  # Deploy to Staging Server
  deploy-staging:
    needs: push-to-ghcr
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: staging

      - name: Package files
        run: |
          mkdir deploy_package
          cp docker-compose.yml deploy_package/
          cp -r infra deploy_package/
          tar -czf deploy.tar.gz deploy_package

      - name: Upload tar.gz to staging VPS
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ vars.SSH_PORT }}
          source: "deploy.tar.gz"
          target: "~/streaker"
          overwrite: true

      - name: Extract and deploy on VPS
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: CR_PAT,DISCORD_STREAKER_WEBHOOK
          script: |
            echo "===== Starting the script now ====="
            cd ~/streaker
            tar -xzf deploy.tar.gz
            cd deploy_package
            export SPRING_DATASOURCE_URL="${{ vars.SPRING_DATASOURCE_URL }}"
            export SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}"
            export SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}"
            export ADMIN_USERNAME="${{ secrets.ADMIN_USERNAME }}"
            export ADMIN_EMAIL="${{ secrets.ADMIN_EMAIL }}"
            export ADMIN_PASSWORD="${{ secrets.ADMIN_PASSWORD }}"
            export POSTGRES_DB="${{ vars.POSTGRES_DB }}"
            export POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
            export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
            export VALID_ORIGIN_ENDPOINT="${{ vars.VALID_ORIGIN_ENDPOINT }}"
            export DISCORD_STREAKER_WEBHOOK="${{ secrets.DISCORD_STREAKER_WEBHOOK }}"
            export DOMAIN="${{ vars.DOMAIN }}"
            export GF_SECURITY_ADMIN_USER="${{ secrets.GF_SECURITY_ADMIN_USER }}"
            export GF_SECURITY_ADMIN_PASSWORD="${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}"
            export CR_PAT="${{ secrets.CR_PAT }}"
            export SPRING_PROFILES_ACTIVE="${{ vars.SPRING_PROFILES_ACTIVE }}"
            export GIT_USERNAME="mregra"
            
            bash ./infra/scripts/deploy.sh
