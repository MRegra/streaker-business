services:
  backend-prod:
    image: ghcr.io/mregra/streaker-backend:latest
    container_name: streaker-backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    env_file:
      - ./infra/env/.env
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - streaker-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles: ["prod"]

  backend-local:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: streaker-backend-local
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    env_file:
      - ./infra/env/.env
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - streaker-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles: ["local"]

  frontend-local:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: streaker-frontend
    volumes:
      - frontend-build:/dist
    networks:
      - streaker-net
    profiles: ["local"]

  db:
    image: postgres:15
    container_name: streaker-postgres
    restart: on-failure
    env_file:
      - ./infra/env/.env
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - streaker-net
    profiles: ["local", "prod"]

  redis:
    image: redis:7.4
    container_name: streaker-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - streaker-net
    restart: unless-stopped
    profiles: ["local", "prod"]

  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: streaker-fluent-bit
    volumes:
      - ./infra/logging/fluent-bit:/fluent-bit/etc
      - shared-logs:/app/logs
    depends_on:
      - loki
    networks:
      - streaker-net
    profiles: ["local", "prod"]

  loki:
    image: grafana/loki:2.9.2
    container_name: streaker-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/config.yaml
    volumes:
      - ./infra/logging/loki/config.yaml:/etc/loki/config.yaml:ro
    networks:
      - streaker-net
    profiles: ["local", "prod"]

  grafana:
    image: grafana/grafana:latest
    container_name: streaker-grafana
    ports:
      - "3000:3000"
    volumes:
      - ./infra/logging/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    env_file:
      - ./infra/env/.env
    networks:
      - streaker-net
    restart: unless-stopped
    profiles: ["local", "prod"]

  caddy-local:
    build:
      context: .
      dockerfile: ./infra/caddy/Dockerfile
    container_name: streaker-caddy-local
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - frontend-build:/usr/share/caddy
      - caddy_data:/data
      - caddy_config:/config
      - ./infra/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
    networks:
      - streaker-net
    depends_on:
      - backend-local
      - frontend-local
      - grafana
    env_file:
      - ./infra/env/.env
    profiles: ["local"]

  caddy-prod:
    image: ghcr.io/mregra/streaker-caddy-prod:latest
    container_name: streaker-caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - streaker-net
    depends_on:
      - backend-prod
      - grafana
    env_file:
      - ./infra/env/.env
    profiles: ["prod"]

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: always
    env_file:
      - ./infra/env/.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.docker/config.json:/config/.dockerconfigjson
    command: streaker-backend streaker-caddy
    profiles: ["watchtower"]

volumes:
  pgdata:
  shared-logs:
  caddy_data:
  caddy_config:
  frontend-build:
  grafana-data:

networks:
  streaker-net:
    driver: bridge
